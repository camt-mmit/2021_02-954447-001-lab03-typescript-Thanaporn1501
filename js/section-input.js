import { create as createInputSum } from './input-sum.js';
function generateContainer(parentContainer) {
    const sectionContainers = parentContainer.querySelectorAll('.cmp-section-container .cmp-section-container');
    sectionContainers.forEach((sectionContainer, i) => {
        sectionContainer.querySelector('.cmp-section-no').textContent = (i + 1).toString();
        sectionContainer.querySelector('.cmd-delete-section').disabled =
            false;
    });
    if (sectionContainers.length === 1) {
        parentContainer.querySelector('.cmp-section-container .cmd-delete-section').disabled = true;
    }
}
function add(parentContainer) {
    const tmpSection = document.querySelector('template#tmp-section');
    const fragment = tmpSection.content.cloneNode(true);
    createInputSum(fragment.querySelector('.cmp-section-container'));
    parentContainer.querySelector('.cmp-section-container').append(fragment);
    generateContainer(parentContainer);
}
function remove(container, parentContainer) {
    container.remove();
    generateContainer(parentContainer);
}
export function create(parentContainer) {
    parentContainer.addEventListener('click', (ev) => {
        const elem = ev.target;
        if (elem.matches('.cmd-add-section')) {
            add(parentContainer);
        }
        else if (elem.matches('.cmd-delete-section')) {
            const container = elem.closest('.cmp-section-container');
            remove(container, parentContainer);
        }
    });
    add(parentContainer);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi1pbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9zZWN0aW9uLWlucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUQsU0FBUyxpQkFBaUIsQ0FBQyxlQUE2QjtJQUNwRCxNQUFNLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBZSwrQ0FBK0MsQ0FBQyxDQUFDO0lBQzFILGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzlDLGdCQUFnQixDQUFDLGFBQWEsQ0FBWSxpQkFBaUIsQ0FBRSxDQUFDLFdBQVcsR0FBRyxDQUMxRSxDQUFDLEdBQUcsQ0FBQyxDQUNKLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixnQkFBZ0IsQ0FBQyxhQUFhLENBQWEscUJBQXFCLENBQUUsQ0FBQyxRQUFRO1lBQzNFLEtBQUssQ0FBQztJQUNWLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBRyxpQkFBaUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQy9CLGVBQWUsQ0FBQyxhQUFhLENBQWEsNENBQTRDLENBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0tBQzVHO0FBQ0wsQ0FBQztBQUVELFNBQVMsR0FBRyxDQUFDLGVBQTZCO0lBQ3RDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQWMsc0JBQXNCLENBQUMsQ0FBQztJQUMvRSxNQUFNLFFBQVEsR0FBRyxVQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQXVCLENBQUM7SUFFM0UsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQWUsd0JBQXdCLENBQUUsQ0FBQyxDQUFDO0lBRWhGLGVBQWUsQ0FBQyxhQUFhLENBQWUsd0JBQXdCLENBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEYsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLFNBQXVCLEVBQUUsZUFBNkI7SUFDbEUsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRW5CLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLGVBQTZCO0lBQ2hELGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUM3QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsTUFBb0IsQ0FBQztRQUVyQyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUNqQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUMzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFlLHdCQUF3QixDQUFFLENBQUM7WUFFeEUsTUFBTSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUgYXMgY3JlYXRlSW5wdXRTdW0gfSBmcm9tICcuL2lucHV0LXN1bS5qcyc7XG5pbXBvcnQgKiBhcyBFVCBmcm9tICcuL2VsZW1lbnQtdHlwZS5qcyc7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29udGFpbmVyKHBhcmVudENvbnRhaW5lcjogRVQuQ29udGFpbmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc2VjdGlvbkNvbnRhaW5lcnMgPSBwYXJlbnRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbDxFVC5Db250YWluZXI+KCcuY21wLXNlY3Rpb24tY29udGFpbmVyIC5jbXAtc2VjdGlvbi1jb250YWluZXInKTtcbiAgICBzZWN0aW9uQ29udGFpbmVycy5mb3JFYWNoKChzZWN0aW9uQ29udGFpbmVyLCBpKSA9PiB7XG4gICAgICAgIHNlY3Rpb25Db250YWluZXIucXVlcnlTZWxlY3RvcjxFVC5OdW1iZXI+KCcuY21wLXNlY3Rpb24tbm8nKSEudGV4dENvbnRlbnQgPSAoXG4gICAgICAgICAgaSArIDFcbiAgICAgICAgICApLnRvU3RyaW5nKCk7XG4gICAgICAgIHNlY3Rpb25Db250YWluZXIucXVlcnlTZWxlY3RvcjxFVC5Db21tYW5kPignLmNtZC1kZWxldGUtc2VjdGlvbicpIS5kaXNhYmxlZCA9XG4gICAgICAgIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgaWYoc2VjdGlvbkNvbnRhaW5lcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHBhcmVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULkNvbW1hbmQ+KCcuY21wLXNlY3Rpb24tY29udGFpbmVyIC5jbWQtZGVsZXRlLXNlY3Rpb24nKSEuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkKHBhcmVudENvbnRhaW5lcjogRVQuQ29udGFpbmVyKTogdm9pZCB7XG4gICAgY29uc3QgdG1wU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8RVQuVGVtcGxhdGU+KCd0ZW1wbGF0ZSN0bXAtc2VjdGlvbicpO1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdG1wU2VjdGlvbiEuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgRVQuVGVtcGxhdGVDb250ZW50O1xuXG4gICAgY3JlYXRlSW5wdXRTdW0oZnJhZ21lbnQucXVlcnlTZWxlY3RvcjxFVC5Db250YWluZXI+KCcuY21wLXNlY3Rpb24tY29udGFpbmVyJykhKTtcblxuICAgIHBhcmVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULkNvbnRhaW5lcj4oJy5jbXAtc2VjdGlvbi1jb250YWluZXInKSEuYXBwZW5kKGZyYWdtZW50KTtcblxuICAgIGdlbmVyYXRlQ29udGFpbmVyKHBhcmVudENvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShjb250YWluZXI6IEVULkNvbnRhaW5lciwgcGFyZW50Q29udGFpbmVyOiBFVC5Db250YWluZXIpIHtcbiAgICBjb250YWluZXIucmVtb3ZlKCk7XG5cbiAgICBnZW5lcmF0ZUNvbnRhaW5lcihwYXJlbnRDb250YWluZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKHBhcmVudENvbnRhaW5lcjogRVQuQ29udGFpbmVyKSB7XG4gICAgcGFyZW50Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSBldi50YXJnZXQgYXMgRVQuQ29tbWFuZDtcblxuICAgICAgICBpZihlbGVtLm1hdGNoZXMoJy5jbWQtYWRkLXNlY3Rpb24nKSkge1xuICAgICAgICAgICAgYWRkKHBhcmVudENvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSBpZihlbGVtLm1hdGNoZXMoJy5jbWQtZGVsZXRlLXNlY3Rpb24nKSkge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZWxlbS5jbG9zZXN0PEVULkNvbnRhaW5lcj4oJy5jbXAtc2VjdGlvbi1jb250YWluZXInKSE7XG5cbiAgICAgICAgICAgIHJlbW92ZShjb250YWluZXIsIHBhcmVudENvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZChwYXJlbnRDb250YWluZXIpO1xufVxuIl19