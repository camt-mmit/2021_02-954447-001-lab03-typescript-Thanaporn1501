function calculateSum(parentContainer) {
    const inputs = parentContainer.querySelectorAll('.cmp-inputs-container .cmp-input-container input[type="number"]');
    let total = 0;
    inputs.forEach((elem) => (total += elem.valueAsNumber));
    parentContainer.querySelector('output.cmp-result').value =
        total.toString();
}
function generateContainer(parentContainer) {
    const inputContainers = parentContainer.querySelectorAll('.cmp-inputs-container .cmp-input-container');
    inputContainers.forEach((inputContainer, i) => {
        inputContainer.querySelector('.cmp-input-no').textContent = (i + 1).toString();
        inputContainer.querySelector('.cmd-delete-input').disabled =
            false;
    });
    if (inputContainers.length === 1) {
        parentContainer.querySelector('.cmp-inputs-container .cmd-delete-input').disabled = true;
    }
    calculateSum(parentContainer);
}
function add(parentContainer) {
    const tmpInput = document.querySelector('template#tmp-input');
    const fragment = tmpInput.content.cloneNode(true);
    parentContainer
        .querySelector('.cmp-inputs-container')
        .append(fragment);
    generateContainer(parentContainer);
}
function remove(container, parentContainer) {
    container.remove();
    generateContainer(parentContainer);
}
export function create(parentContainer) {
    parentContainer.addEventListener('click', (ev) => {
        const elem = ev.target;
        if (elem.matches('.cmd-add-input')) {
            add(parentContainer);
        }
        else if (elem.matches('.cmd-delete-input')) {
            const container = elem.closest('.cmp-input-container');
            remove(container, parentContainer);
        }
    });
    const inputsContainer = parentContainer.querySelector('.cmp-inputs-container');
    inputsContainer.addEventListener('change', (ev) => {
        const elem = ev.target;
        if (elem.matches('input[type="number"]')) {
            calculateSum(parentContainer);
        }
    });
    add(parentContainer);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc3VtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL2lucHV0LXN1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLFlBQVksQ0FBQyxlQUE2QjtJQUNqRCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQzdDLGlFQUFpRSxDQUNsRSxDQUFDO0lBRUYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDeEQsZUFBZSxDQUFDLGFBQWEsQ0FBWSxtQkFBbUIsQ0FBRSxDQUFDLEtBQUs7UUFDbEUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLGVBQTZCO0lBQ3RELE1BQU0sZUFBZSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FDdEQsNENBQTRDLENBQzdDLENBQUM7SUFDRixlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVDLGNBQWMsQ0FBQyxhQUFhLENBQVksZUFBZSxDQUFFLENBQUMsV0FBVyxHQUFHLENBQ3RFLENBQUMsR0FBRyxDQUFDLENBQ04sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNiLGNBQWMsQ0FBQyxhQUFhLENBQWEsbUJBQW1CLENBQUUsQ0FBQyxRQUFRO1lBQ3JFLEtBQUssQ0FBQztJQUNWLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNoQyxlQUFlLENBQUMsYUFBYSxDQUMzQix5Q0FBeUMsQ0FDekMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0tBQ3BCO0lBRUQsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFTLEdBQUcsQ0FBQyxlQUE2QjtJQUN4QyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFjLG9CQUFvQixDQUFFLENBQUM7SUFDNUUsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUF1QixDQUFDO0lBRXhFLGVBQWU7U0FDWixhQUFhLENBQWUsdUJBQXVCLENBQUU7U0FDckQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXBCLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxTQUF1QixFQUFFLGVBQTZCO0lBQ3BFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVuQixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxlQUE2QjtJQUNsRCxlQUFlLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQW9CLENBQUM7UUFFckMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDbEMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDNUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBZSxzQkFBc0IsQ0FBRSxDQUFDO1lBRXRFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUdILE1BQU0sZUFBZSxHQUFHLGVBQWUsQ0FBQyxhQUFhLENBQ25ELHVCQUF1QixDQUN2QixDQUFDO0lBQ0gsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQ2hELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFrQixDQUFDO1FBRW5DLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFO1lBQ3hDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFVCBmcm9tICcuL2VsZW1lbnQtdHlwZS5qcyc7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVN1bShwYXJlbnRDb250YWluZXI6IEVULkNvbnRhaW5lcik6IHZvaWQge1xuICBjb25zdCBpbnB1dHMgPSBwYXJlbnRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbDxFVC5JbnB1dD4oXG4gICAgJy5jbXAtaW5wdXRzLWNvbnRhaW5lciAuY21wLWlucHV0LWNvbnRhaW5lciBpbnB1dFt0eXBlPVwibnVtYmVyXCJdJ1xuICApO1xuXG4gIGxldCB0b3RhbCA9IDA7XG4gIGlucHV0cy5mb3JFYWNoKChlbGVtKSA9PiAodG90YWwgKz0gZWxlbS52YWx1ZUFzTnVtYmVyKSk7XG4gIHBhcmVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULk91dHB1dD4oJ291dHB1dC5jbXAtcmVzdWx0JykhLnZhbHVlID1cbiAgICB0b3RhbC50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbnRhaW5lcihwYXJlbnRDb250YWluZXI6IEVULkNvbnRhaW5lcik6IHZvaWQge1xuICBjb25zdCBpbnB1dENvbnRhaW5lcnMgPSBwYXJlbnRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbDxFVC5Db250YWluZXI+KFxuICAgICcuY21wLWlucHV0cy1jb250YWluZXIgLmNtcC1pbnB1dC1jb250YWluZXInXG4gICk7XG4gIGlucHV0Q29udGFpbmVycy5mb3JFYWNoKChpbnB1dENvbnRhaW5lciwgaSkgPT4ge1xuICAgIGlucHV0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3I8RVQuTnVtYmVyPignLmNtcC1pbnB1dC1ubycpIS50ZXh0Q29udGVudCA9IChcbiAgICAgIGkgKyAxXG4gICAgKS50b1N0cmluZygpO1xuICAgIGlucHV0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3I8RVQuQ29tbWFuZD4oJy5jbWQtZGVsZXRlLWlucHV0JykhLmRpc2FibGVkID1cbiAgICAgIGZhbHNlO1xuICB9KTtcblxuICBpZiAoaW5wdXRDb250YWluZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgIHBhcmVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULkNvbW1hbmQ+KFxuICAgICAgJy5jbXAtaW5wdXRzLWNvbnRhaW5lciAuY21kLWRlbGV0ZS1pbnB1dCdcbiAgICApIS5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBjYWxjdWxhdGVTdW0ocGFyZW50Q29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gYWRkKHBhcmVudENvbnRhaW5lcjogRVQuQ29udGFpbmVyKTogdm9pZCB7XG4gIGNvbnN0IHRtcElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxFVC5UZW1wbGF0ZT4oJ3RlbXBsYXRlI3RtcC1pbnB1dCcpITtcbiAgY29uc3QgZnJhZ21lbnQgPSB0bXBJbnB1dC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSBhcyBFVC5UZW1wbGF0ZUNvbnRlbnQ7XG5cbiAgcGFyZW50Q29udGFpbmVyXG4gICAgLnF1ZXJ5U2VsZWN0b3I8RVQuQ29udGFpbmVyPignLmNtcC1pbnB1dHMtY29udGFpbmVyJykhXG4gICAgLmFwcGVuZChmcmFnbWVudCk7XG5cbiAgZ2VuZXJhdGVDb250YWluZXIocGFyZW50Q29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKGNvbnRhaW5lcjogRVQuQ29udGFpbmVyLCBwYXJlbnRDb250YWluZXI6IEVULkNvbnRhaW5lcikge1xuICBjb250YWluZXIucmVtb3ZlKCk7XG5cbiAgZ2VuZXJhdGVDb250YWluZXIocGFyZW50Q29udGFpbmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShwYXJlbnRDb250YWluZXI6IEVULkNvbnRhaW5lcikge1xuICBwYXJlbnRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHtcbiAgICBjb25zdCBlbGVtID0gZXYudGFyZ2V0IGFzIEVULkNvbW1hbmQ7XG5cbiAgICBpZiAoZWxlbS5tYXRjaGVzKCcuY21kLWFkZC1pbnB1dCcpKSB7XG4gICAgICBhZGQocGFyZW50Q29udGFpbmVyKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0ubWF0Y2hlcygnLmNtZC1kZWxldGUtaW5wdXQnKSkge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZWxlbS5jbG9zZXN0PEVULkNvbnRhaW5lcj4oJy5jbXAtaW5wdXQtY29udGFpbmVyJykhO1xuXG4gICAgICByZW1vdmUoY29udGFpbmVyLCBwYXJlbnRDb250YWluZXIpO1xuICAgIH1cbiAgfSk7XG5cblxuICBjb25zdCBpbnB1dHNDb250YWluZXIgPSBwYXJlbnRDb250YWluZXIucXVlcnlTZWxlY3RvcjxFVC5Db250YWluZXI+KFxuICAgICcuY21wLWlucHV0cy1jb250YWluZXInXG4gICkhO1xuICBpbnB1dHNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2KSA9PiB7XG4gICAgY29uc3QgZWxlbSA9IGV2LnRhcmdldCBhcyBFVC5JbnB1dDtcblxuICAgIGlmIChlbGVtLm1hdGNoZXMoJ2lucHV0W3R5cGU9XCJudW1iZXJcIl0nKSkge1xuICAgICAgY2FsY3VsYXRlU3VtKHBhcmVudENvbnRhaW5lcik7XG4gICAgfVxuICB9KTtcblxuICBhZGQocGFyZW50Q29udGFpbmVyKTtcbn1cbiJdfQ==